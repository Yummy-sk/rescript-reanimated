// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Exports from "./exports";
import * as ReactNativeReanimated from "react-native-reanimated";

var make = Exports.AnimatedView;

var View = {
  make: make
};

var make$1 = Exports.AnimatedText;

var $$Text = {
  make: make$1
};

function Make(Arguments) {
  return {};
}

var AnimatedGestureHandler = {
  Make: Make
};

function make$2(smth) {
  return {
          value: smth
        };
}

var SharedValue = {
  make: make$2
};

function easing_linear(prim) {
  return ReactNativeReanimated.Easing.linear(prim);
}

function easing_quad(prim) {
  return ReactNativeReanimated.Easing.quad(prim);
}

var easing = {
  linear: easing_linear,
  quad: easing_quad
};

var Easing = {
  easing: easing
};

function makeConfig(durationOpt, easingOpt, param) {
  var duration = durationOpt !== undefined ? durationOpt : 300;
  var easing = easingOpt !== undefined ? easingOpt : ReactNativeReanimated.Easing.inOut(easing_quad);
  return {
          duration: duration,
          easing: easing
        };
}

var Timing = {
  makeConfig: makeConfig
};

function withTiming(toValue, userConfig, callback, param) {
  return ReactNativeReanimated.withTiming(toValue, userConfig, callback);
}

function makeConfig$1(mass, stiffness, overshootClamping, restDisplacementThreshold, restSpeedThreshold, velocity, damping, param) {
  return {
          mass: mass,
          stiffness: stiffness,
          overshootClamping: overshootClamping,
          restDisplacementThreshold: restDisplacementThreshold,
          restSpeedThreshold: restSpeedThreshold,
          velocity: velocity,
          damping: damping
        };
}

var Spring = {
  makeConfig: makeConfig$1
};

function withSpring(toValue, userConfig, callback, param) {
  return ReactNativeReanimated.withSpring(toValue, userConfig, callback);
}

var Extrapolation = {};

var ExtrapolationType = {};

var Interpolate = {};

export {
  View ,
  $$Text ,
  AnimatedGestureHandler ,
  SharedValue ,
  Easing ,
  Timing ,
  withTiming ,
  Spring ,
  withSpring ,
  Extrapolation ,
  ExtrapolationType ,
  Interpolate ,
  
}
/* make Not a pure module */
